import express from "express";
const app = express();
import dotenv from "dotenv";
dotenv.config();

import cors from "cors";
import session from "express-session";
import crypto from "crypto";
import mongoSanitize from "express-mongo-sanitize";
import rateLimiter from "express-rate-limit";
import { logger } from "./middleware/logger.js";

//error handler
import "express-async-errors";

import morgan from "morgan";

// db and authenticateUser
import connectDB from "./db/connect.js";

// routers
import authRouter from "./routes/authRoutes.js";
import jobsRouter from "./routes/jobsRouter.js";
import jobAppRouter from "./routes/jobAppRoutes.js";
import userRouter from "./routes/userRouter.js";

// middleware
import errorHandlerMiddleware from "./middleware/error-handler.js";
import notFoundMiddleware from "./middleware/not-found.js";
import authenticateUser from "./middleware/auth.js";

//cors config
const corsOptions = {
  origin: "http://localhost:3000",
  methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
};

//session config
app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: true,
  })
);

const csrf_Token = crypto.randomBytes(16).toString("hex");

//append csrf token to current session
app.use((req, res, next) => {
  if (!req.session.csrfToken) {
    req.session.csrfToken = csrf_Token;
  }
  next();
});

const port = process.env.PORT || 5000;

app.use(cors(corsOptions));

if (process.env.NODE_ENV !== "production") {
  app.use(morgan("dev"));
}
app.use(express.json());

const limiter = rateLimiter({
  windowMs: 10 * 60 * 1000,
  max: 100,
});
app.use(limiter);
app.use(mongoSanitize());

app.get("/", (req, res) => {
  res.json({ msg: "Welcome" });
});

// for retriving csrf token
app.get("/api/v1/csrf-token", authenticateUser, (req, res) => {
  res.json({ csrfToken: req.session.csrfToken });
});

app.use("/api/v1/auth", authRouter);
app.use("/api/v1/jobs", authenticateUser, jobsRouter);
app.use("/api/v1/jobApps", authenticateUser, jobAppRouter);
app.use("/api/v1/users", userRouter);

app.use(notFoundMiddleware);
app.use(errorHandlerMiddleware);

const start = async () => {
  try {
    await connectDB(process.env.MONGO_URL);
    app.listen(port, () => {
      logger.info(`Server is listing on port : ${port}`);
    });
  } catch (error) {
    logger.error(error);
  }
};

start();
